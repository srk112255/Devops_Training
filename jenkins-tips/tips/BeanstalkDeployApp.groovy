#!/usr/bin/env groovy

// Purpose: Deploy Elastic Beanstalk application
def DeployApplication(app_short_name, app_full_name, version, environment, options = null, health_timeout = 600) {
    def version_label = "${app_short_name}-${version}"
    def zip_archive_path = "${app_short_name}/${version_label}.zip"
    def release_label = "${version_label}-release"
    withAWS(region:'us-east-1') {
        try {
            // Create application version
            sh """
                aws elasticbeanstalk create-application-version \
                --source-bundle S3Bucket='ifunny-builds-us',S3Key=${zip_archive_path} \
                --application-name '${app_full_name}' --version-label ${release_label}
            """.stripIndent()
        }
		// Beanstalk will return error if we want to create the version one more time
        catch(error) {
            echo "This application version already exists."
        }

        // Deploy application version
        if (options != null) {
            sh """
                aws elasticbeanstalk update-environment \
                --environment-name ${environment} \
                --application-name '${app_full_name}' \
                --version-label ${release_label} \
                --option-settings ${options}
            """.stripIndent()
        }
        else {
            sh """
                aws elasticbeanstalk update-environment \
                --environment-name ${environment} \
                --application-name '${app_full_name}' \
                --version-label ${release_label}
            """.stripIndent()
        }

        // WAIT FOR BEANSTALK DEPLOYMENT
        timeout(time: health_timeout, unit: 'SECONDS') {
            waitUntil {
                sleep 20
                sh """
                    aws elasticbeanstalk describe-environment-health \
                    --environment-name ${environment} \
                    --attribute-names All > .beanstalk-status.json
                """.stripIndent()
                // Parse `describe-environment-health` output
                def beanstalkStatusAsJson = readFile(".beanstalk-status.json")
                def beanstalkStatus = new groovy.json.JsonSlurper().parseText(beanstalkStatusAsJson)
                println "$beanstalkStatus"
				// Close the loop if both status checks succeeded
                return beanstalkStatus.HealthStatus == "Ok" && beanstalkStatus.Status == "Ready"
            }
        }
    }
}

stage ("Deploy to Beanstalk") {
    application = 'testapp'
	application_full_name = 'Test Application'
	// This parameter might be generated by Jenkins
	release = 'test-1'
	environment = 'production'
    beanstalk.DeployApplication(
        application, application_full_name, release, environment
	)
}
